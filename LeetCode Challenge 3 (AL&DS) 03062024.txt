LeetCode Challenge 3 (AL&DS) 03/06/2024

-> Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

Solution:
class Solution(object):
    def singleNumber(self, nums):
        result = 0
        for num in nums:
            result ^= num
        return result

Link: https://leetcode.com/problems/single-number/solutions/4872225/challenge-3-al-ds/
Explanation: So, this implementation efficiently finds the single number that appears only once in the array nums using the XOR operation, with a linear runtime complexity of O(n), where n is the number of elements in the array.