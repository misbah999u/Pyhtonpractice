LeetCode Challenge 19(AL&DS) 03/28/2024

-> Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.
Solution: 
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        # Initialize two pointers, 'l' and 'r', pointing to the start and end of the array, respectively.
        l, r = 0, len(numbers) - 1
        
        # Use a while loop to iterate until 'l' is less than 'r'.
        while l < r:
            # Calculate the sum of the numbers at positions 'l' and 'r'.
            sum_val = numbers[l] + numbers[r]
            
            # If the sum is greater than the target, decrement 'r'.
            if sum_val > target:
                r -= 1
            # If the sum is less than the target, increment 'l'.
            elif sum_val < target:
                l += 1
            # If the sum is equal to the target, return the indices [l+1, r+1].
            else:
                return [l + 1, r + 1]
Link:
Explanation: So, the method twoSum effectively utilizes the two-pointer technique to find a pair of numbers in the list that add up to the target and returns their 1-indexed indices.

