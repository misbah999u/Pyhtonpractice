ASSIGNMENT 01/05/2024
Class question:
def find_longest_binary_gap(N):
   

    binary_representation = bin(N)[2:]


    current_gap_length = 0
    longest_gap_length = 0


    for digit in binary_representation:

        if digit == '0':
            current_gap_length += 1
        else:
            longest_gap_length = max(longest_gap_length, current_gap_length)
            current_gap_length = 0

    longest_gap_length = max(longest_gap_length, current_gap_length)

    return longest_gap_length


N = 991
longest_gap_length = find_longest_binary_gap(N)
print(f"The longest binary gap in {N} is {longest_gap_length}")

->Write a Python program that demonstrates the immutability of a frozenset by attempting to add or remove elements from it.

Solution:

# A Frozenset
original_frozenset = frozenset({1, 2, 3, 4})

# here we are trying to add an element to a frozenset
try:
    original_frozenset.add(5)
except AttributeError as e:
    print(f"Error cant add the element: {e}")

# here we are trying to remove an element from the forzenset
try:
    original_frozenset.remove(2)
except AttributeError as e:
    print(f"Error cant remove element: {e}")

# Showing the original frozenset after adding and removing the elements
print("Original frozenset:", original_frozenset)

Output: 
Error cant add the element: 'frozenset' object has no attribute 'add'
Error cant remove element: 'frozenset' object has no attribute 'remove'
Original frozenset: frozenset({1, 2, 3, 4})

-> Write a Python program that uses a frozenset as a key in a dictionary to create a hashable composite key for more complex data structures.

Solution:

def create_composite_key(name, age):
  """Frozensets are immutable and hashable, making them ideal for composite keys.."""
  return frozenset({name, age})

person_data = {}

# Adding data 
person_data[create_composite_key("Mike",  65)] = {"height": "5'8", "sports": "Tabletennis"}
person_data[create_composite_key("Bobby", 29)] = {"height": "6'2", "sports": "Basketball"}
person_data[create_composite_key("Charlie", 30)] = {"height": "6'3", "sports": "Cricket"}

# Retrieve data 
key = create_composite_key("Bobby", 29)
if key in person_data:
  print(person_data[key])

# create a duplicate key 
person_data[create_composite_key("Mike", 65)] = {"height": "5'9", "sports": "Swimming"}

# updated values
key = create_composite_key("Mike", 65)
print(person_data[key])  

Output: 

{'height': "6'2", 'sports': 'Basketball'}
{'height': "5'9", 'sports': 'Swimming'}  

-> Write a Python program that generates a frozenset containing the squares of all odd numbers from 1 to 15 using set comprehension.

Solution:
 
# generate a frozenset
odd_squares_frozenset = frozenset({x**2 for x in range(1, 16) if x % 2 != 0})

# Displaythe frozenset
print("Frozenset of Squares of Odd Numbers:", odd_squares_frozenset)

Output:

Frozenset of Squares of Odd Numbers: frozenset({1, 121, 225, 9, 169, 81, 49, 25})

-> Write a Python program that creates a memory view from a bytearray, reverses the order using slicing, and converts back to a bytearray.

Solution:
 
# Creating a bytearray
orig_bytearray = bytearray(b'Hello, World!')

# Creating a memory view 
memory_view = memoryview(orig_bytearray)

# Reverse the order
reve_memory_view = memory_view[::-1]

# Convert
reve_bytearray = bytearray(reve_memory_view)

# Display 
print("Original bytearray:", orig_bytearray)
print("Reversed bytearray:", reve_bytearray)

Output:

Original bytearray: bytearray(b'Hello, World!')
Reversed bytearray: bytearray(b'!dlroW ,olleH')

-> Write a Python program to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.

Solution: 

from datetime import datetime

def convert_date(original_date):
    
    original_datetime = datetime.strptime(original_date, '%Y-%m-%d')
    
    converted_date = original_datetime.strftime('%d-%m-%Y')
    
    return converted_date


original_date = "2023-04-12"
converted_date = convert_date(original_date)

# Display the result
print(f"Original Date: {original_date}")
print(f"Converted Date: {converted_date}")

Output: 

Original Date: 2023-04-12
Converted Date: 12-04-2023

 