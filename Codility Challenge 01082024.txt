Codility Challenge 01//08/2024

->An array A consisting of N integers is given. Rotation of the array means that each element is shifted right by one index, and the last element of the array is moved to the first place. For example, the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7] (elements are shifted right by one index and 6 is moved to the first place).

The goal is to rotate array A K times; that is, each element of A will be shifted to the right K times.

Write a function:

def solution(A, K)

that, given an array A consisting of N integers and an integer K, returns the array A rotated K times.

For example, given

    A = [3, 8, 9, 7, 6]
    K = 3
the function should return [9, 7, 6, 3, 8]. Three rotations were made:

    [3, 8, 9, 7, 6] -> [6, 3, 8, 9, 7]
    [6, 3, 8, 9, 7] -> [7, 6, 3, 8, 9]
    [7, 6, 3, 8, 9] -> [9, 7, 6, 3, 8]
For another example, given

    A = [0, 0, 0]
    K = 1
the function should return [0, 0, 0]

Given

    A = [1, 2, 3, 4]
    K = 4
the function should return [1, 2, 3, 4]

Assume that:

N and K are integers within the range [0..100];
each element of array A is an integer within the range [âˆ’1,000..1,000].
In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.

Solution:

def solution(A, K):

    if not A or K == 0:
        return A

    
    necessary_rota = K % len(A)

    rota_array = A[-necessary_rota:] + A[:-necessary_rota]

    return rota_array

A1 = [3, 8, 9, 7, 6]
K1 = 3
print(solution(A1, K1))  

A2 = [0, 0, 0]
K2 = 1
print(solution(A2, K2))  

A3 = [1, 2, 3, 4]
K3 = 4
print(solution(A3, K3))  

Output:

[9, 7, 6, 3, 8]
[0, 0, 0]
[1, 2, 3, 4]

Link: https://app.codility.com/demo/results/training42KPG9-2XG/

Explanation: 
Here's a breakdown of the code:

if not A or K == 0:: Checks if the input list A is empty or if the rotation count K is zero. If either condition is true, it means there is no need for rotation, so the original list A is returned as it is.

necessary_rota = K % len(A): Calculates the effective rotation count by taking the remainder of K divided by the length of the list A. This is done to handle cases where K is larger than the length of the list, and it ensures that only the necessary rotations are performed.

rota_array = A[-necessary_rota:] + A[:-necessary_rota]: Performs the rotation operation by slicing the list A into two parts. The first part includes the last necessary_rota elements, and the second part includes the remaining elements. These two parts are then concatenated to form the rotated list, which is stored in the variable rota_array.

return rota_array: The rotated list is returned as the result of the function.

The code then demonstrates the usage of the solution function with three examples:

A1 = [3, 8, 9, 7, 6], K1 = 3: The list is rotated by 3 positions to the right. The resulting list is [9, 7, 6, 3, 8].

A2 = [0, 0, 0], K2 = 1: The list is rotated by 1 position to the right. The resulting list remains the same [0, 0, 0] as the rotation is circular.

A3 = [1, 2, 3, 4], K3 = 4: The list is rotated by 4 positions to the right. The resulting list is [1, 2, 3, 4] as the rotation is equivalent to a full circular rotation.

In summary, the code implements a circular rotation operation on a given list based on the specified rotation count.
