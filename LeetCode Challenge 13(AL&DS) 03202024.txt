LeetCode Challenge 13(AL&DS) 03/20/2024
-> Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
Solution:


class Solution:
    def trap(self, height: List[int]) -> int:
        sm = 0
        n = len(height)
        pre = [0] * n
        suf = [0] * n
        pre[0] = height[0]
        for i in range(1, n):
            pre[i] = max(pre[i - 1], height[i])

        suf[n - 1] = height[n - 1]
        for j in range(n - 2, -1, -1):
            suf[j] = max(suf[j + 1], height[j])

        for i in range(n):
            sm += min(suf[i], pre[i]) - height[i]

        return sm
Link: https://leetcode.com/problems/trapping-rain-water/solutions/4903427/challenge-13-al-ds/
Explanation: It iterates through each bar in the input list and calculates the trapped rainwater by taking the minimum of the maximum heights from both sides (suf[i] and pre[i]) and subtracting the height of the current bar (height[i]). This represents the amount of rainwater that can be held at this specific position.It aggregates the trapped rainwater for all bars and returns the total amount.