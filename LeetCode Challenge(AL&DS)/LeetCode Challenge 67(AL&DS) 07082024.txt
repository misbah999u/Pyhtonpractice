LeetCode Challenge 67(AL&DS) 07/08/2024
->Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104
 

Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?

Solution: class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        row = len(triangle)
        memo = triangle[row-1].copy()

        for r in range(row-2, -1, -1):
            for c in range(r+1):
                memo[c] = min(memo[c], memo[c+1]) + triangle[r][c]
        
        return memo[0]
Link:https://leetcode.com/problems/triangle/solutions/5448164/challenge-67-al-ds/
Explanation: The `Solution` class's `minimumTotal` method calculates the minimum path sum from top to bottom in a given triangle of integers. It uses a bottom-up dynamic programming approach, where `memo` stores the minimum path sums for each position starting from the last row and iteratively updating values from the second last row to the top. The final result is the minimum path sum starting from the top of the triangle, stored in `memo[0]`.
