LeetCode Challenge 36(AL&DS) 04/30/2024
-> Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.
 

Constraints:

1 <= n <= 20
1 <= k <= n
Solution:
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        def recursion(l,gen,index,res):
            if len(gen)==k:
                res+=[gen[:]]
                return
            for i in range(index,n):
                gen+=[l[i]]
                index+=1
                recursion(l,gen,index,res)
                #using .pop() to remove 1 element from the generated list
                gen.pop()
                # iterating from the i + 1th position to avoid repetition
                index=i+1
        l=list(range(1,n+1))
        res=[]
        recursion(l,[],0,res)
        return res
Link:https://leetcode.com/problems/combinations/solutions/5126771/challenge-36-al-ds/
Explanation: 
This Python code defines a class Solution with a method combine that takes two parameters, n and k, both integers, and returns a list of lists of integers.