LeetCode Challenge 47(AL&DS) 05/20/2024
-> Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the WordDictionary class:

WordDictionary() Initializes the object.
void addWord(word) Adds word to the data structure, it can be matched later.
bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
 

Example:

Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True
 

Constraints:

1 <= word.length <= 25
word in addWord consists of lowercase English letters.
word in search consist of '.' or lowercase English letters.
There will be at most 2 dots in word for search queries.
At most 104 calls will be made to addWord and search.

Solution: class WordDictionary:

    def __init__(self):
        self.root = {}
        

    def addWord(self, word: str) -> None:
        level = self.root
        for c in word:
            if not (c in level): 
                level[c] = {}
            level = level[c]
        level['end'] = True

    def search(self, word: str) -> bool:
        return dfs(self.root, word)

def dfs(root, s):
    # if it the end of the word return we found it
    if len(s) == 0 and ('end' in root): return True
    # if is the end of the word but not marked as end we return false
    if len(s) == 0: return False
    # if it is a . we shoud traverse all nodes and try to find a match
    if s[0] == '.':
        for c in root:
            if c != 'end':
                # if we found one we return True
                if dfs(root[c], s[1:]): return True
    # if we don't find the letter in next level e return false
    if  (s[0] not in root): return False
    # search next level
    return dfs(root[s[0]], s[1:])       


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
Link: https://leetcode.com/problems/design-add-and-search-words-data-structure/solutions/5194821/challenge-47-al-ds/
Explanation:The `WordDictionary` class implements a trie data structure to store words and supports adding words and searching for them, including searches with wildcard characters ('.'). The `addWord` method inserts a word into the trie by iterating through its characters and creating nested dictionaries as needed, marking the end of a word with a special key. The `search` method uses a helper function `dfs` to recursively traverse the trie, checking for exact matches and handling the '.' wildcard by exploring all possible paths. This allows for flexible and efficient word searches in the dictionary.
