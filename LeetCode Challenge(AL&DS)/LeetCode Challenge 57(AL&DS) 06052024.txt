LeetCode Challenge 57(AL&DS) 06/05/2024
->  You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

Solution:class Solution:
    def climbStairs(self, n: int) -> int:
        dp = [0] * (n + 1)
        dp[0] = 1
        dp[1] = 1

        for i in range(2, n + 1):
            dp[i] = dp[i-1] + dp[i-2]
        
        return dp[-1]
Link: https://leetcode.com/problems/climbing-stairs/solutions/5265205/challenge-57-al-ds/
Explanation: The `climbStairs` function calculates the number of distinct ways to climb `n` stairs, where each step can be 1 or 2 stairs at a time. It uses dynamic programming, initializing a `dp` array to store the number of ways to reach each step, then iteratively fills the array based on the sum of the ways to reach the two preceding steps. The function returns the value at the last index of the array, representing the total ways to climb `n` stairs.

