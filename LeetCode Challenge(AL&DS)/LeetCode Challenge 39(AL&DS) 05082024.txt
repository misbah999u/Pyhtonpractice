LeetCode Challenge 39(AL&DS) 05/08/2024
-> Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8
Solution: 
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(S='', left=0, right=0):
            if len(S) == 2 * n:
                result.append(S)
                return
            if left < n:
                backtrack(S + '(', left + 1, right)
            if right < left:
                backtrack(S + ')', left, right + 1)

        result = []
        backtrack()
        return result
Link: https://leetcode.com/problems/generate-parentheses/solutions/5131316/challenge-39-al-ds/
Explanation: Overall, this approach uses backtracking to systematically explore all possible combinations of parentheses, ensuring that each combination is balanced (i.e., the count of left and right parentheses is equal at any point) and valid.
