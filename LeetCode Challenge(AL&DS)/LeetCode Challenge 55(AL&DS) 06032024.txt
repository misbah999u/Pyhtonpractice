LeetCode Challenge 55(AL&DS) 06/03/2024
-> Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

Solution: class Solution:
    def longestPalindrome(self, s):
        def expand(l, r):
            while l >= 0 and r < len(s) and s[l] == s[r]:
                l -= 1
                r += 1
            return s[l+1:r]

        result = ""
        for i in range(len(s)):
            sub1 = expand(i, i)
            if len(sub1) > len(result):
                result = sub1
            sub2 = expand(i, i+1)
            if len(sub2) > len(result):
                result = sub2
        return result
Link: https://leetcode.com/problems/longest-palindromic-substring/solutions/5265178/challenge-55-al-ds/
Explanation: The `longestPalindrome` function finds the longest palindromic substring in a given string `s` by expanding around each character and pair of characters. The helper function `expand` checks for palindromes centered at indices `l` and `r`. It updates the result with the longest palindrome found by expanding around each character and each pair of characters in the string.

