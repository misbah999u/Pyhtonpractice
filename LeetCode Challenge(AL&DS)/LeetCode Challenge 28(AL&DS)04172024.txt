LeetCode Challenge 28(AL&DS)04/17/2024
-> Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
Solution:
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        maxLength = 0
        charSet = set()
        left = 0
        
        for right in range(n):
            if s[right] not in charSet:
                charSet.add(s[right])
                maxLength = max(maxLength, right - left + 1)
            else:
                while s[right] in charSet:
                    charSet.remove(s[left])
                    left += 1
                charSet.add(s[right])
        
        return maxLength
Link: https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/5060182/challenge-28-al-ds/
Explanation: This Python solution, encapsulated within a class, addresses the "Longest Substring Without Repeating Characters" problem. It iterates through the given string, tracking the longest substring without repeating characters. It uses a sliding window approach with two pointers, `left` and `right`, and a set to store unique characters within the current substring. The function returns the length of the longest non-repeating substring found.