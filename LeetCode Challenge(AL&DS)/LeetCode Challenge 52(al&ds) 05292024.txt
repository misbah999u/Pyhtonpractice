LeetCode Challenge 52(al&ds) 05/29/2024
-> You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

Solution: class Solution:
    def climbStairs(self, n: int) -> int:
        dp = [0] * (n + 1)
        dp[0] = 1
        dp[1] = 1

        for i in range(2, n + 1):
            dp[i] = dp[i-1] + dp[i-2]
        
        return dp[-1]
Link: https://leetcode.com/problems/climbing-stairs/solutions/5265248/challenge-52-al-ds/
Explanation: This `climbStairs` function calculates the number of ways to climb to the nth step of a staircase, where each time you can either climb 1 or 2 steps. It utilizes dynamic programming by maintaining an array `dp` where `dp[i]` represents the number of ways to reach the ith step. The function iterates through each step, updating `dp` with the sum of ways to reach the previous two steps, finally returning the value stored at the last index of `dp`, representing the total number of ways to climb `n` stairs.
