LeetCode Challenge 59(AL&DS) 06/07/2024
-> You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105

Solution: class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        memo = defaultdict(int)
        # modification: add "trnas" variable that keeps count of transactions, it gets incremented whenever you sell a stock(so only sells after buying)
        def dp(idx,state,trans):
            if idx >= len(prices):
                return 0
            if trans >= 2:
                return 0

            if (idx,state,trans) not in memo:
                if not state:   #buy
                    memo[(idx,state,trans)] = max(dp(idx+1, not state,trans) - prices[idx] , dp(idx+1,state,trans))
                else:   #sell
                    memo[(idx,state,trans)] = max(dp(idx+1, not state,trans+1) + prices[idx], dp(idx+1,state,trans))   
            return memo[(idx,state,trans)]
            
        return dp(0,False,0)
Link: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/solutions/5399213/challenge-59-al-ds/
Explanation: This solution uses dynamic programming to find the maximum profit from at most two stock transactions. It employs memoization to store intermediate results and a recursive helper function `dp` to decide whether to buy, sell, or hold stocks at each step, ensuring no more than two transactions are made.
