LeetCode Challenge 49(AL&DS) 05/22/2024
-> Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

Solution: class Solution:
    def permute(self, l: List[int]) -> List[List[int]]:
        def dfs(path, used, res):
            if len(path) == len(l):
                res.append(path[:]) # note [:] make a deep copy since otherwise we'd be append the same list over and over
                return

            for i, letter in enumerate(l):
                # skip used letters
                if used[i]:
                    continue
                # add letter to permutation, mark letter as used
                path.append(letter)
                used[i] = True
                dfs(path, used, res)
                # remove letter from permutation, mark letter as unused
                path.pop()
                used[i] = False
            
        res = []
        dfs([], [False] * len(l), res)
        return res
Link:https://leetcode.com/problems/permutations/solutions/5194830/challenge-49-al-ds/
Explanation: The `permute` method in the `Solution` class generates all possible permutations of a list of integers `l`. It uses a depth-first search (DFS) helper function `dfs` to build permutations recursively. The `dfs` function tracks the current permutation path, a boolean list of used elements, and the result list `res`. It appends completed permutations to `res` and backtracks to explore other permutations by adding and removing elements from the path. The method initiates the process and returns the list of all permutations.
