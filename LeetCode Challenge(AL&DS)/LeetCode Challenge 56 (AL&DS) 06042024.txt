LeetCode Challenge 56 (AL&DS) 06/04/2024
-> You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400


Solution: class Solution:
    def rob(self, nums):
        n = len(nums)
        if n == 0:
            return 0

        s0, s1 = [0, 0], [0, 0]
        s1[0] = nums[0]

        for i in range(1, n):
            s0[i % 2] = max(s0[(i - 1) % 2], s1[(i - 1) % 2])
            s1[i % 2] = s0[(i - 1) % 2] + nums[i]

        return max(s0[(n - 1) % 2], s1[(n - 1) % 2])



Link: https://leetcode.com/problems/house-robber/solutions/5265191/challenge-56-al-ds/
Explanation: The `rob` function determines the maximum amount of money that can be robbed from a series of houses without robbing two consecutive houses. It uses two arrays, `s0` and `s1`, to keep track of the maximum amounts when the current house is not robbed (`s0`) and when it is robbed (`s1`). The function iterates through the houses, updating these arrays, and returns the maximum value from the last house, ensuring no two consecutive houses are robbed.

