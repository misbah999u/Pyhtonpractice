LeetCode Challenge 2(AL&DS) 03/05/2024
-> Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

Solution: 
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        if numRows == 0:
            return []
        if numRows == 1:
            return [[1]]
        
        prevRows = self.generate(numRows - 1)
        newRow = [1] * numRows
        
        for i in range(1, numRows - 1):
            newRow[i] = prevRows[-1][i - 1] + prevRows[-1][i]
        
        prevRows.append(newRow)
        return prevRows
Link: https://leetcode.com/problems/pascals-triangle/solutions/4829504/challenge-2-al-ds/
Explanation: This Python class, `Solution`, has a `generate` method. It takes an integer `numRows` as input and gives back the first `numRows` of Pascal's triangle as a list of lists of integers.

- If `numRows` is 0, it returns an empty list.
- If `numRows` is 1, it returns `[[1]]`.
- For `numRows` greater than 1, it calls itself recursively with `numRows - 1` to get the previous rows.
- Then, it creates a new row with `numRows` elements, all set to 1.
- Each element of the new row, except the first and last ones, is the sum of the corresponding elements from the previous row.
- Finally, it appends the new row to the previous rows and returns the updated list of rows.

This method effectively constructs Pascal's triangle up to the specified number of rows by adding to the previous rows.