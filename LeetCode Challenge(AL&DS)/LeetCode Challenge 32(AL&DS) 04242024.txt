LeetCode Challenge 32(AL&DS) 04/24/2024
-> Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1
Solution:
class Solution:
    def isHappy(self, n: int) -> bool:
        if n == 1 or n == 7:
            return True
        if n < 10:
            return False
        lib = set()
        while n != 1:
            n = sum(int(i)**2 for i in str(n))
            if n in lib:
                return False
            lib.add(n)
        return True
Link: https://leetcode.com/problems/happy-number/solutions/5089452/challenge-32-al-ds/
Explanation: In summary, the isHappy method determines whether a given number is a happy number by repeatedly summing the squares of its digits until it either reaches 1 (indicating it's a happy number) or enters a cycle of numbers it has seen before.

