Codility Challenge 01/18/2024

-> A string S consisting of N characters is called properly nested if:

S is empty;
S has the form "(U)" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, string "(()(())())" is properly nested but string "())" isn't.

Write a function:

def solution(S)

that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.

For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..1,000,000];
string S is made only of the characters '(' and/or ')'.

Solution:

def solution(S):
    stack = []
    
    for char in S:
        if char == '(':
            stack.append(char)
        else:
            if not stack:
                return 0  
            stack.pop()
    
   
    return 1 if not stack else 0  
result1 = solution("(()(())())")
result2 = solution("())")

print(f"Result 1: {result1}")
print(f"Result 2: {result2}")


Link:https://app.codility.com/demo/results/training9BG9KQ-X8E/
Explanation: It goes through each character in the string. If the character is an opening parenthesis, it puts it on a stack. If the character is a closing parenthesis, it checks if the stack has an opening parenthesis. If it does, it takes the opening parenthesis off the stack, indicating a match.