Codility Challenge 01//03/2024

-> A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.

For example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps. The number 32 has binary representation 100000 and has no binary gaps.

Write a function:

def solution(N)

that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.

For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. Given N = 32 the function should return 0, because N has binary representation '100000' and thus no binary gaps.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..2,147,483,647].


Solution:

def solution(N):
    
    bina_repr = bin(N)[2:]
    
    curr_gap = 0
    max_gap = 0

    for digit in bina_repr:
        if digit == '0':
        
            curr_gap += 1
        else:
            max_gap = max(max_gap, curr_gap)
            
            curr_gap = 0

    return max_gap

print(solution(1041))  
print(solution(32))    

Output:

5
0

Link: https://app.codility.com/demo/results/training2ANGR4-7EV/
Explantion: binary gap is defined as a sequence of consecutive zeros between two ones in the binary representation of a number.

This Python code defines a function solution(N) that takes an integer N as input and calculates the length of the longest binary gap in its binary representation. A binary gap is defined as a sequence of consecutive zeros between two ones in the binary representation of a number.

Here's a step-by-step explanation of the code:

bin(N)[2:]: Convert the decimal integer N to its binary representation and remove the '0b' prefix. The result is stored in the variable bina_repr.

curr_gap and max_gap: Initialize two variables, curr_gap and max_gap, both set to 0. curr_gap will keep track of the length of the current binary gap being processed, and max_gap will store the length of the longest binary gap encountered so far.

Loop through each digit in the binary representation (bina_repr) using a for loop.

Inside the loop, if the current digit is '0', increment the curr_gap counter. This means that a consecutive zero has been found.

If the current digit is '1', update max_gap by taking the maximum value between the current max_gap and curr_gap. Then, reset curr_gap to 0, as the consecutive zeros sequence has been interrupted by a '1'.

After the loop, return the value of max_gap, representing the length of the longest binary gap in the binary representation of the input integer N.

The code then prints the results of calling the solution function with two different inputs: 1041 and 32.

Let's analyze the examples:

solution(1041): The binary representation of 1041 is '10000010001', and the longest binary gap is between the 6th and 11th positions (inclusive) with a length of 5. Therefore, the output will be 5.
solution(32): The binary representation of 32 is '100000', and the longest binary gap is between the 2nd and 6th positions (inclusive) with a length of 4. Therefore, the output will be 4.
