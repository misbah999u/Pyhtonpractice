Codility Challenge 01/19/2024	

-> A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

S is empty;
S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

def solution(S)

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..200,000];
string S is made only of the following characters: '(', '{', '[', ']', '}' and/or ')'.

Solution: 

def solution(S):
    # Initializing the stack    
    stack = []

    brac_pairs = {')': '(', '}': '{', ']': '['}

    for char in S:
        if char in brac_pairs.values():
            stack.append(char)
        elif char in brac_pairs.keys():
            if not stack or stack.pop() != brac_pairs[char]:
                return 0
    return 1 if not stack else 0  

result1 = solution("{[()()]}")
result2 = solution("([)()]")

print(f"Result 1: {result1}")
print(f"Result 2: {result2}")

 
Link: https://app.codility.com/demo/results/trainingJGBH8Z-BV4/
Explanation: It goes through each character in the string. If the character is an opening bracket, it adds it to a stack. If the character is a closing bracket, it checks two things: whether the stack is empty and if the top of the stack matches the corresponding opening bracket. If either condition fails, it signals that there is an unmatched bracket, and the function returns 0.
