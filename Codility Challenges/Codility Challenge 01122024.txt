Codility Challenge 01/12/2024

-> This is a demo task.

Write a function:

def solution(A)

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].

Solution: 
def solution(A):
    n = len(A)
    
    #only positive integers 
    posit_nums = [num for num in A if num > 0]
    
    # set
    posit_set = set(posit_nums)
    
    # smallest postive integer      
    smallest_positive = 1
    while smallest_positive in posit_set:
        smallest_positive += 1
    
    return smallest_positive

print(solution([1, 3, 6, 4, 1, 2])) 
print(solution([1, 2, 3]))           
print(solution([-1, -3]))            

Output:
5
4
1

Link: https://app.codility.com/demo/results/trainingTQ9STJ-RAG/
Explanation: Divide the numbers into positive and non-positive groups. Make a set of positive numbers. Look for the smallest positive number missing.